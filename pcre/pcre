#!/usr/bin/perl

use v5.014;
use warnings;
use strict;
use Time::HiRes qw/time/;

my $tool = "pcre";
my $version = "0.2.1";
sub Version {
	say "$tool v$version";
}

sub Usage($$) {
	my ($code, $msg) = @_;

	if ( defined $msg ) {
		say $msg;
	}

my$text = <<"EOF";
 NAME
	pcre - run a list of PCRE regexes across a data set

 SYNOPSIS
	pcre --regex REGEX_LIST --data FILE [ --alpha | --desc ] [ --dumpreg REGEX_NAME ] [ --unmatch FILE ]
	pcre --version | --help

 DESCRIPTION
    REQUIRED
	--regex REGEX_LIST
		Specify the location of the REGEX_LIST file
	--data  FILE
		Specify the location of the file containing the DATA set to test

    OPTIONAL

	--dumpreg REGEX_NAME
		Specify which REGEX_NAME results to dump to a file. The file will be
		named REGEX_NAME.txt

	--unmatch FILE
		Specify the name of the FILE where unmatched records will be placed.
		The default name is 'unmatched.txt'

	By default, results are printed in the order listed in REGEX_LIST. The result
        output can be modified with these next two flags

	--alpha
		Results will be printed with regex names from REGEX_LIST listed
                alphabetically
	--desc
		Results will be printed with hit counts listed in descending order

	--help
		Display this usage text and exit
	--version
		Display the program version and exit

EOF

	print STDERR $text;
	exit $code;
}

# Open a file and return the file handle. Exit on error. Pass in
# fileName = @_[0], and mode = @_[1]
#
sub OpenFile($$) {
	my ($name, $mode) = @_;

	my $fh;
	if ( $mode =~ /^<$/ ) {
		open($fh, $mode, $name) or die "$name: $!";
	} elsif ( $mode =~ /^>$/ ) {
		my $trunc = 0;
		if ( -e $name ) {
			$trunc = 1;
		}

		open($fh, $mode, $name) or die "$name: $!";
		if ( $trunc ) {
			truncate $fh, 0;
		}
	}

	return $fh;
}

# Read in the regex ruleset to evaluate. The file format is
#     # comment
#     regexName \t regex
#
# %r contains the regex name (as key) and the precompiled regex (qr//) as value
# @seq contains the sequence which the regexes were read in (by name).
#  hash[regexName] = sequence number. Used for quick sequence number lookup.
# $sequencedRegexes contains the regex names in the sequence they were read in.
#  Used to iterate the regexes in the corect sequence
#
sub LoadRegexList($) {
	my $fileName = shift;
	my (%r, %seq);
	my $lineCount = 1;

	my $fh = OpenFile($fileName, "<");
	while ( <$fh> ) {
		next if /^#/;
		chomp;
		my ($regName, $regex) = split("\t", $_);
		$r{$regName}{regex} = qr/$regex/;
		$r{$regName}{count} = 0;
		$r{$regName}{seconds} = 0;
		$seq{$regName}=$lineCount;
		$lineCount++
	}
	close($fh);

	my $sequencedRegexes = FormRuleSequence(\%seq);
	return \%r, \%seq, $sequencedRegexes;
}


sub FormRuleSequence($) {
	my ( $hash ) = shift;
	my @regexNames;
	# sort descending
	foreach my $name ( sort { $hash->{$a} <=> $hash->{$b} } keys %{$hash} ) {
		push @regexNames, $name;
	}

	return \@regexNames;
}

sub GetCommandLine($) {
	my ( $opt ) = @_;

	use Getopt::Long;

	GetOptions(
		"alpha"      => \$opt->{alpha}, # results printed by alphabetical regex name
		"desc"       => \$opt->{desc},  # results printed by hit count, descending order
		"dumpreg=s"  => \$opt->{dumpreg}, # dump the records that match a particular regex

		"unmatch=s"  => \$opt->{unmatch}, # file to drop in the data that does not match
		"r|regex=s"  => \$opt->{regex},
		"d|data=s"   => \$opt->{data},

		"h|help"     => \$opt->{help},
		"v|version"  => \$opt->{version},
	);

	Version and exit if ( $opt->{version} );
	Usage(0,'') if ( $opt->{help} );
	Usage(1,'--regex is required') unless $opt->{regex};
	Usage(1,'--data is required') unless $opt->{data};

	# defaults can be set
	#$opt->{regex} = "path/to/regex.list" unless $opt->{regex};
	#$opt->{data}  = "path/to/data.txt" unless $opt->{data};
	$opt->{unmatch}  = "unmatched.txt" unless $opt->{unmatch};

	if ( $opt->{alpha} && $opt->{desc} ) {
		Usage(1, q/only one of --alpha or --desc may be selected/);
	}
}

sub main {
	my %opt;
	GetCommandLine(\%opt);
	my ($regexTests, $seq, $sequencedRegexes)  = LoadRegexList($opt{regex});
	my $dataFh = OpenFile($opt{data}, "<");
	my $unmatch = OpenFile($opt{unmatch}, ">");
	my $dumpFh;
	if ( defined $opt{dumpreg} ) {
		my $match = 0;
		my $dumpregFile = $opt{dumpreg} . ".txt";
		foreach my $regName ( @{$sequencedRegexes} ) {
			if ( $regName =~ /$opt{dumpreg}/ ) {
				$dumpFh = OpenFile($dumpregFile, ">");
				$match = 1;
				last;
			}
		}

		if ( ! $match ) {
			printf STDERR "no matching regex name found for '$opt{dumpreg}'. nothing to dump\n";
			undef $opt{dumpreg};
		} else {
			printf STDERR "dumping '$opt{dumpreg}' to $dumpregFile\n"
		}
	}

	my ($lineCount, $matchedCount,  $unmatchedCount) = (0, 0, 0);

	my $start = time();
	NEXT_LINE:
	while ( my $line = <$dataFh> ) {
		$line =~ s/\n$//;
		my $match = 0;
		$lineCount++;
		my $lineStart = time();
		foreach my $regName (@$sequencedRegexes) {
			if ( $line =~ /$regexTests->{$regName}{regex}/ ) {
				$regexTests->{$regName}{seconds} = (time() - $lineStart);
				$regexTests->{$regName}{count}++;
				$match = 1;
				$matchedCount++;
				if ( defined $opt{dumpreg} && $regName =~ /$opt{dumpreg}/ ) {
					printf $dumpFh "$line\n";
				}
				goto NEXT_LINE;
			}
		}

		$unmatchedCount++;
		printf $unmatch "$line\n";
	}

	my $end = time();
	close $dataFh;
	close $unmatch;
	if ( defined $opt{dumpreg} ) {
		close $dumpFh;
	}

	my $matchSum = 0;
	foreach my $k ( keys %{$regexTests} ) {
		if ( defined $regexTests->{$k}{count} && $regexTests->{$k}{count} > 0 ) {
			$matchSum += $regexTests->{$k}{count};
		}
	}

	printf "SUMMARY\n\n";
	use DateTime;
	my $dt = DateTime->now;
	printf "  run date : %20s\n", $dt;
	printf "%10.6f : elapsed total (seconds)\n", $end - $start;
	printf "%10d : data lines read in\n", $lineCount;
	printf "%10d : regexes loaded\n", scalar @{$sequencedRegexes};
	printf "%10d : matched lines\n", $matchSum;
	if ( $matchSum != $matchedCount ) {
		printf STDERR "\t!!\$matchSum ($matchSum) != \$matchedCount ($matchedCount)\n";
	}
	printf "%10d : unmatched lines\n\n", $unmatchedCount;

	printf "MATCHES\n\n";
	printf "%30s %8s %8s   %11s\n", "REGEX", "ORD", "HITS", "DURATION";
	if ( defined $opt{alpha} ) {
		my @list = sort @{$sequencedRegexes};
		foreach my $regName ( @list ) {
			printf "%30s %8d %8d %11.9f\n", $regName, $seq->{$regName}, $regexTests->{$regName}{count}, $regexTests->{$regName}{seconds};
		}
	} elsif ( defined $opt{desc} ) {
		foreach my $regName ( sort { $regexTests->{$b}{count} <=> $regexTests->{$a}{count} } keys %{$regexTests} ) {
			printf "%30s %8d %8d %11.9f\n", $regName, $seq->{$regName}, $regexTests->{$regName}{count}, $regexTests->{$regName}{seconds};
		}
	} else {
		foreach my $regName ( @{$sequencedRegexes} ) {
			printf "%30s %8d %8d %11.9f\n", $regName, $seq->{$regName}, $regexTests->{$regName}{count}, $regexTests->{$regName}{seconds};
		}
	}

	say ' '
}

main;
